format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
# one * for italics, two ** for bold
map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
# Make sure values are not factors
df[[c]] <- as.character( df[[c]])
# Update formatting
df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
}
}
return(df)
}
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#GENERAR ETIQIETAS DE LAS VARIABLES
attr(base_senda_fiscalia$time_to_tr_comp, "label") <- "Tiempo a completar tratamiento"
attr(base_senda_fiscalia$time_to_off, "label") <- "Tiempo al delito en calidad de imputado"
attr(base_senda_fiscalia$tr_comp, "label") <- "Completa tratamiento (Completar=1/ Abandono=0)"
attr(base_senda_fiscalia$off, "label") <- "Delito en calidad imputado por el que recibe sentencia definitiva condenatoria (1= Presencia)"
attr(base_senda_fiscalia$policonsumo, "label") <- "Trastornos por consumo de sustancias concurrentes (consumo de varias sustancias)"
attr(base_senda_fiscalia$subclass, "label") <- "Identificaci?n de pareamiento"
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#GENERAR UNA TABLA 1
tbone_desc<-
CreateTableOne(vars=c("time_to_tr_comp", "tr_comp", "time_to_off", "off"), data=  base_senda_fiscalia, factorVars = c("tr_comp","offending"), smd=T, strata="policonsumo", addOverall = T, includeNA=T, test=T)
as.data.frame.TableOne(tbone_desc, smd=T, nonnormal= T)%>%
dplyr::mutate(char2=characteristic) %>%
tidyr::fill(char2) %>%
dplyr::select(char2,everything()) %>%
dplyr::mutate(level=ifelse(is.na(level),"[Missing]",level)) %>%
dplyr::mutate(char2=dplyr::case_when(characteristic=="NA"~NA_character_,T~as.character(characteristic))) %>%
format_cells(1, 1:length(names(.)), "bold") %>%
dplyr::select(-1) %>%
knitr::kable(size=10, format="markdown",caption= "Resumen descriptivos, según  PSU(0) y PSU (1)", escape=T)
#kable(size=10, format="html",caption= "Resumen descriptivos, según  PSU(0) y PSU (1)") %>%     kableExtra::kable_classic()
reticulate::repl_python()
#https://techoverflow.net/2019/11/12/how-plot-multiple-kaplan-meier-curves-using-lifelines/
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#INSTALAR PAQUETES. SI NO EXISTE, IMPORTA MODULOS
try:
import statsmodels.api as sm
import statsmodels.formula.api as smf
except:
!pip install statsmodels
import statsmodels.api as sm
import statsmodels.formula.api as smf
try:
import pandas as pd
except:
!pip install pandas
import pandas as pd
try:
from lifelines import KaplanMeierFitter
from lifelines.utils import median_survival_times
from lifelines.statistics import pairwise_logrank_test
except:
!pip install lifelines
from lifelines import KaplanMeierFitter
from lifelines.utils import median_survival_times
from lifelines.statistics import pairwise_logrank_test
try:
import matplotlib.pyplot as plt
except:
!pip install matplotlib
import matplotlib.pyplot as plt
try:
import numpy as np
except:
!pip install numpy
import numpy as np
#!pip install pymsm --user
#!pip3 install transitionMatrix
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
sf = sm.SurvfuncRight(r.base_senda_fiscalia["time_to_tr_comp"], r.base_senda_fiscalia["tr_comp"])
fig = sf.plot()
lcb, ucb = sf.simultaneous_cb()
ax = fig.get_axes()[0]
ax.fill_between(sf.surv_times, lcb, ucb, color='lightgrey')
ax.set_ylabel("Proporci?n")
ax.set_xlabel("A?os desde la admisi?n a tratamiento")
sf.summary().head()
# result = multivariate_logrank_test(r.base_senda_fiscalia['time_to_tr_comp'], r.base_senda_fiscalia['policonsumo'], r.base_senda_fiscalia['tr_comp'])
# result.test_statistic
# result.p_value
# result.print_summary()
try:
import statsmodels.api as sm
import statsmodels.formula.api as smf
except ImportError:
import os
os.system('pip install statsmodels')
import statsmodels.api as sm
import statsmodels.formula.api as smf
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#INSTALAR PAQUETES. SI NO EXISTE, IMPORTA MODULOS
try:
import statsmodels.api as sm
import statsmodels.formula.api as smf
except ImportError:
import os
os.system('pip install statsmodels')
import statsmodels.api as sm
import statsmodels.formula.api as smf
try:
import pandas as pd
except ImportError:
import os
os.system('pip install pandas')
import pandas as pd
try:
from lifelines import KaplanMeierFitter
from lifelines.utils import median_survival_times
from lifelines.statistics import pairwise_logrank_test
except ImportError:
import os
os.system('pip install lifelines')
from lifelines import KaplanMeierFitter
from lifelines.utils import median_survival_times
from lifelines.statistics import pairwise_logrank_test
try:
import matplotlib.pyplot as plt
except ImportError:
import os
os.system('pip install matplotlib')
import matplotlib.pyplot as plt
try:
import numpy as np
except ImportError:
import os
os.system('pip install numpy')
import numpy as np
#!pip install pymsm --user
#!pip3 install transitionMatrix
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_
sf = sm.SurvfuncRight(r.base_senda_fiscalia["time_to_tr_comp"], r.base_senda_fiscalia["tr_comp"])
fig = sf.plot()
lcb, ucb = sf.simultaneous_cb()
ax = fig.get_axes()[0]
ax.fill_between(sf.surv_times, lcb, ucb, color='lightgrey')
ax.set_ylabel("Proporcion")
ax.set_xlabel("Anios desde la admision a tratamiento")
sf.summary().head()
# result = multivariate_logrank_test(r.base_senda_fiscalia['time_to_tr_comp'], r.base_senda_fiscalia['policonsumo'], r.base_senda_fiscalia['tr_comp'])
# result.test_statistic
# result.p_value
# result.print_summary()
exit
rm(list = ls())
unlink("Trabajo-1_files", recursive=T)
unlink("Trabajo 1_files", recursive=T)
#fuentes:
#https://rpubs.com/georgy_makarov/897844
path<-paste0(getwd(),'/env')
#Sys.setenv(RETICULATE_PYTHON =  "")
#Sys.setenv(RETICULATE_PYTHON =  Sys.which("python"))
#reticulate::py_config()
#use_python(paste0(path,"/Scripts/python.exe"))
#Sys.setenv(LD_LIBRARY_PATH =  paste0(path,"/Lib"))
#Sys.setenv(LD_LIBRARY_PATH_64 =  paste0(path,"/Lib"))
#instalar paquetes de funcionalidades basicas para tener ubicaciones relativas y acceso a python (reticulate)
if(!require(reticulate)){install.packages("reticulate")}
if(!require(rstudioapi)){install.packages("rstudioapi")}
invisible("Create env")
#https://stackoverflow.com/questions/54043607/how-to-set-pyenv-python-for-reticulate
#Directory H:/Mi unidad/PERSONAL ANDRES/UCH_salud_publica/asignaturas/env is not a Python virtualenv
#virtualenv_create(envname  = path, packages = c("pip", "statsmodels", "matplotlib", "numpy", "pandas", "scipy"))
# "C:/Users/andre/anaconda3/python.exe" -m venv "H:/Mi unidad/PERSONAL ANDRES/UCH_salud_publica/asignaturas/9_Computacion_Estadistica/env"
#FUENTES:
#https://rstudio.github.io/reticulate/articles/versions.html
#Virtual environment functions are not supported on Windows (the use of conda environments is recommended on Windows).
invisible("Use environment")
#https://ugoproto.github.io/ugo_r_doc/pdf/reticulate.pdf
# tx  <- readLines(paste0(path,"/pyvenv.cfg"))
# tx[[1]] <- paste0("home = ",gsub('/', '\\', paste0(path,"/Scripts/python.exe"), fixed=T))
# tx[[3]] <- "version = 3.8.0"
#writeLines(tx, con=paste0(path,"/pyvenv.cfg"))
#H:/Mi unidad/PERSONAL ANDRES/UCH_salud_publica/asignaturas/env/Scripts/python.exe"
#use_virtualenv(path)
#usar entorno virtual ya creado
#informacion sobre entorno virtual
#py_discover_config()
#conda_python(envname =  "r-scrublet")
# FUENTES
#https://akrabat.com/creating-virtual-environments-with-pyenv/
#https://rstudio.github.io/reticulate/reference/install_python.html
#https://github.com/pyenv/pyenv/wiki#suggested-build-environment
#https://github.com/pyenv/pyenv
#https://stackoverflow.com/questions/56755156/reticulate-not-setting-python-path
#https://github.com/rstudio/reticulate/issues/291#issuecomment-437143751
#https://github.com/pyenv/pyenv
#https://github.com/pyenv-win/pyenv-win#installation
#https://stackoverflow.com/questions/52060867/how-to-use-pip-for-pyenv
#https://github.com/pyenv/pyenv/issues/2417
gc()
load("G:/My Drive/PERSONAL ANDRES/UCH_salud_publica/asignaturas/9_Computacion_Estadistica/Trabajo 1.RData")
rio::export(ms_d_match_surv,"data_ms_d_match_surv.dta")
glimpse(ms_d_match_surv)
tidyr::glimpse(ms_d_match_surv)
dplyr::glimpse(ms_d_match_surv)
rio::export(ms_d_match_surv,"data_ms_d_match_surv.csv")
dput(head(ms_d_match_surv))
head(ms_d_match_surv)
head(ms_d_match_surv$data)
head(ms_d_match_surv$Data)
head(ms_d_match_surv)
data.table(head(ms_d_match_surv))
data.table::data.table(head(ms_d_match_surv))
dput(data.table::data.table(head(ms_d_match_surv)))
msm<-data.table::data.table(head(ms_d_match_surv))
msm
dput(msm)
dput(msm[1:6,])
dput(msm[[1]])
msm[[1]]
msm}
msm
View(ms_d_match_surv)
#Libraries used in the routine. Dont change the order
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
copiar_nombres <- function(x,row.names=FALSE,col.names=TRUE,dec=",",...) {
if(class(try(dplyr::ungroup(x)))[1]=="tbl_df"){
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
} else {
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
}
}
pacman::p_unlock(lib.loc = .libPaths()) #para no tener problemas reinstalando paquetes
if(!require(pacman)){install.packages("pacman")}
if(!require(devtools)){install.packages("devtools", type = "win.binary", dependencies=T)}
pacman::p_load(ggpattern, rio, tidyverse, tidylog, tableone, compareGroups, Hmisc, kableExtra, DT, polycor, corrplot, jtools,  missRanger, missForest, knitr, kableExtra, plotly, janitor, survey, lubridate, Epi, mstate, survdim, devtools, MatchIt, cobalt, eha, DiagrammeR, DiagrammeRsvg, rsvg, htmltools, webshot, flexsurv, muhaz, Metrics, sjPlot, job, showtext, magick, dlookr, easystats, ggpmisc, rms, rateratio.test, XML, RCurl, rlist, install=T)
if(!require(RMSTSens)){remotes::install_github("seungjae2525/RMSTSens")}
if(!require(survcomp)){try(devtools::install_github("bhklab/survcomp",upgrade ="never"))}
try(webshot::install_phantomjs())
if(!require(bpmn)){try(devtools::install_github("bergant/bpmn",upgrade ="never"))}
#if(!require(Statamarkdown)){try(devtools::install_github("Hemken/Statamarkdown",upgrade ="never"))}
# #Error in if (options$noisey == TRUE) message(paste("\n", options$engine,  :
#   argumento tiene longitud cero
# Calls: <Anonymous> ... sew.list -> lapply -> FUN -> sew.character -> <Anonymous>
#easystats::install_suggested()
options(scipen=2) #display numbers rather scientific number
#remotes::install_github("chjackson/flexsurv-dev", upgrade = "never")
#devtools::install_github("hputter/mstate", upgrade = "never")
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
fitstats.flexsurvreg = function(x){
ll = x$loglik
aic = x$AIC
k = length(x$coefficients)
n = sum(x$data$m["(weights)"])
aicc = aic + ((2 * k) * (k + 1) / (n - k - 1))
bic = - 2 * ll + (k * log(n))
data.frame(
Df = k,
"n2ll" = -2 * ll,
AIC = aic,
AICc = aicc,
BIC = bic
)
}
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
if(.Platform$OS.type == "windows") withAutoprint({
memory.size()
memory.size(TRUE)
memory.limit()
})
memory.limit(size=56000)
path<-dirname(rstudioapi::getSourceEditorContext()$path)
options(knitr.kable.NA = '')
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#to format rows in bold
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
# one * for italics, two ** for bold
map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
# Make sure values are not factors
df[[c]] <- as.character( df[[c]])
# Update formatting
df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
}
}
return(df)
}
#To produce line breaks in messages and warnings
knitr::knit_hooks$set(
error = function(x, options) {
paste('\n\n<div class="alert alert-danger">',
gsub('##', '\n', gsub('^##\ Error', '**Error**', x)),
'</div>', sep = '\n')
},
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
},
message = function(x, options) {
paste('<div class="message">',
gsub('##', '\n', x),
'</div>', sep = '\n')
}
)
irrs<-function(x, y="event", z="person_days",db){
#x= variable que agrupa
#y= evento explicado
#z= person days
#db= base de datos
fmla <- as.formula(paste0(y,"~",x))
fmla2 <- as.formula(paste0(z,"~",x))
assign(paste0("irr_",y,"_por_",x),
rateratio.test::rateratio.test(
x=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)],
n=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)]
)
)
return(
rateratio.test::rateratio.test(
x=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)],
n=as.numeric(xtabs(fmla2, data=get(db)))[c(2,1)]
)
)
}
knitr::include_graphics("transmat_ser23_2.svg")
renv::snapshot()
rm(list=ls());gc()
#If you render multiple documents from the same script or R session, you should detach("Statamarkdown") in between documents.
try(detach("Statamarkdown"))
no_mostrar=1
load("Trabajo 1.RData")
#Libraries used in the routine. Dont change the order
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
copiar_nombres <- function(x,row.names=FALSE,col.names=TRUE,dec=",",...) {
if(class(try(dplyr::ungroup(x)))[1]=="tbl_df"){
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
} else {
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
}
}
pacman::p_unlock(lib.loc = .libPaths()) #para no tener problemas reinstalando paquetes
if(!require(pacman)){install.packages("pacman")}
if(!require(devtools)){install.packages("devtools", type = "win.binary", dependencies=T)}
pacman::p_load(ggpattern, rio, tidyverse, tidylog, tableone, compareGroups, Hmisc, kableExtra, DT, polycor, corrplot, jtools,  missRanger, missForest, knitr, kableExtra, plotly, janitor, survey, lubridate, Epi, mstate, survdim, devtools, MatchIt, cobalt, eha, DiagrammeR, DiagrammeRsvg, rsvg, htmltools, webshot, flexsurv, muhaz, Metrics, sjPlot, job, showtext, magick, dlookr, easystats, ggpmisc, rms, rateratio.test, XML, RCurl, rlist, install=T)
if(!require(RMSTSens)){remotes::install_github("seungjae2525/RMSTSens")}
if(!require(survcomp)){try(devtools::install_github("bhklab/survcomp",upgrade ="never"))}
try(webshot::install_phantomjs())
if(!require(bpmn)){try(devtools::install_github("bergant/bpmn",upgrade ="never"))}
#if(!require(Statamarkdown)){try(devtools::install_github("Hemken/Statamarkdown",upgrade ="never"))}
# #Error in if (options$noisey == TRUE) message(paste("\n", options$engine,  :
#   argumento tiene longitud cero
# Calls: <Anonymous> ... sew.list -> lapply -> FUN -> sew.character -> <Anonymous>
#easystats::install_suggested()
options(scipen=2) #display numbers rather scientific number
#remotes::install_github("chjackson/flexsurv-dev", upgrade = "never")
#devtools::install_github("hputter/mstate", upgrade = "never")
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
fitstats.flexsurvreg = function(x){
ll = x$loglik
aic = x$AIC
k = length(x$coefficients)
n = sum(x$data$m["(weights)"])
aicc = aic + ((2 * k) * (k + 1) / (n - k - 1))
bic = - 2 * ll + (k * log(n))
data.frame(
Df = k,
"n2ll" = -2 * ll,
AIC = aic,
AICc = aicc,
BIC = bic
)
}
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
if(.Platform$OS.type == "windows") withAutoprint({
memory.size()
memory.size(TRUE)
memory.limit()
})
memory.limit(size=56000)
path<-dirname(rstudioapi::getSourceEditorContext()$path)
options(knitr.kable.NA = '')
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#to format rows in bold
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
# one * for italics, two ** for bold
map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
# Make sure values are not factors
df[[c]] <- as.character( df[[c]])
# Update formatting
df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
}
}
return(df)
}
#To produce line breaks in messages and warnings
knitr::knit_hooks$set(
error = function(x, options) {
paste('\n\n<div class="alert alert-danger">',
gsub('##', '\n', gsub('^##\ Error', '**Error**', x)),
'</div>', sep = '\n')
},
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
},
message = function(x, options) {
paste('<div class="message">',
gsub('##', '\n', x),
'</div>', sep = '\n')
}
)
irrs<-function(x, y="event", z="person_days",db){
#x= variable que agrupa
#y= evento explicado
#z= person days
#db= base de datos
fmla <- as.formula(paste0(y,"~",x))
fmla2 <- as.formula(paste0(z,"~",x))
assign(paste0("irr_",y,"_por_",x),
rateratio.test::rateratio.test(
x=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)],
n=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)]
)
)
return(
rateratio.test::rateratio.test(
x=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)],
n=as.numeric(xtabs(fmla2, data=get(db)))[c(2,1)]
)
)
}
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
tidy = FALSE,
message = FALSE,
fig.align = 'center',
out.width = "100%")
options(knitr.table.format = "html")
library(RefManageR)
BibOptions(check.entries = FALSE,
bib.style = "numeric",
cite.style = "numeric",
style = "text",
super = TRUE,
hyperlink = FALSE,
first.inits = TRUE,
max.names = TRUE,
dashed = TRUE)
myBib <- ReadBib("libreria_poly.txt", check = F,  .Encoding="latin1")
knitr::include_graphics("descarga.png")
knitr::include_graphics("transmat_ser23_2.svg")
install.packages("qrcode")
