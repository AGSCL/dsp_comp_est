invisible("Use environment")
#https://ugoproto.github.io/ugo_r_doc/pdf/reticulate.pdf
# tx  <- readLines(paste0(path,"/pyvenv.cfg"))
# tx[[1]] <- paste0("home = ",gsub('/', '\\', paste0(path,"/Scripts/python.exe"), fixed=T))
# tx[[3]] <- "version = 3.8.0"
#writeLines(tx, con=paste0(path,"/pyvenv.cfg"))
#H:/Mi unidad/PERSONAL ANDRES/UCH_salud_publica/asignaturas/env/Scripts/python.exe"
#use_virtualenv(path)
#usar entorno virtual ya creado
#informacion sobre entorno virtual
#py_discover_config()
#conda_python(envname =  "r-scrublet")
# FUENTES
#https://akrabat.com/creating-virtual-environments-with-pyenv/
#https://rstudio.github.io/reticulate/reference/install_python.html
#https://github.com/pyenv/pyenv/wiki#suggested-build-environment
#https://github.com/pyenv/pyenv
#https://stackoverflow.com/questions/56755156/reticulate-not-setting-python-path
#https://github.com/rstudio/reticulate/issues/291#issuecomment-437143751
#https://github.com/pyenv/pyenv
#https://github.com/pyenv-win/pyenv-win#installation
#https://stackoverflow.com/questions/52060867/how-to-use-pip-for-pyenv
#https://github.com/pyenv/pyenv/issues/2417
gc()
load("G:/My Drive/PERSONAL ANDRES/UCH_salud_publica/asignaturas/9_Computacion_Estadistica/Trabajo 1.RData")
rio::export(ms_d_match_surv,"data_ms_d_match_surv.dta")
glimpse(ms_d_match_surv)
tidyr::glimpse(ms_d_match_surv)
dplyr::glimpse(ms_d_match_surv)
rio::export(ms_d_match_surv,"data_ms_d_match_surv.csv")
dput(head(ms_d_match_surv))
head(ms_d_match_surv)
head(ms_d_match_surv$data)
head(ms_d_match_surv$Data)
head(ms_d_match_surv)
data.table(head(ms_d_match_surv))
data.table::data.table(head(ms_d_match_surv))
dput(data.table::data.table(head(ms_d_match_surv)))
msm<-data.table::data.table(head(ms_d_match_surv))
msm
dput(msm)
dput(msm[1:6,])
dput(msm[[1]])
msm[[1]]
msm}
msm
View(ms_d_match_surv)
#Libraries used in the routine. Dont change the order
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
copiar_nombres <- function(x,row.names=FALSE,col.names=TRUE,dec=",",...) {
if(class(try(dplyr::ungroup(x)))[1]=="tbl_df"){
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
} else {
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
}
}
pacman::p_unlock(lib.loc = .libPaths()) #para no tener problemas reinstalando paquetes
if(!require(pacman)){install.packages("pacman")}
if(!require(devtools)){install.packages("devtools", type = "win.binary", dependencies=T)}
pacman::p_load(ggpattern, rio, tidyverse, tidylog, tableone, compareGroups, Hmisc, kableExtra, DT, polycor, corrplot, jtools,  missRanger, missForest, knitr, kableExtra, plotly, janitor, survey, lubridate, Epi, mstate, survdim, devtools, MatchIt, cobalt, eha, DiagrammeR, DiagrammeRsvg, rsvg, htmltools, webshot, flexsurv, muhaz, Metrics, sjPlot, job, showtext, magick, dlookr, easystats, ggpmisc, rms, rateratio.test, XML, RCurl, rlist, install=T)
if(!require(RMSTSens)){remotes::install_github("seungjae2525/RMSTSens")}
if(!require(survcomp)){try(devtools::install_github("bhklab/survcomp",upgrade ="never"))}
try(webshot::install_phantomjs())
if(!require(bpmn)){try(devtools::install_github("bergant/bpmn",upgrade ="never"))}
#if(!require(Statamarkdown)){try(devtools::install_github("Hemken/Statamarkdown",upgrade ="never"))}
# #Error in if (options$noisey == TRUE) message(paste("\n", options$engine,  :
#   argumento tiene longitud cero
# Calls: <Anonymous> ... sew.list -> lapply -> FUN -> sew.character -> <Anonymous>
#easystats::install_suggested()
options(scipen=2) #display numbers rather scientific number
#remotes::install_github("chjackson/flexsurv-dev", upgrade = "never")
#devtools::install_github("hputter/mstate", upgrade = "never")
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
fitstats.flexsurvreg = function(x){
ll = x$loglik
aic = x$AIC
k = length(x$coefficients)
n = sum(x$data$m["(weights)"])
aicc = aic + ((2 * k) * (k + 1) / (n - k - 1))
bic = - 2 * ll + (k * log(n))
data.frame(
Df = k,
"n2ll" = -2 * ll,
AIC = aic,
AICc = aicc,
BIC = bic
)
}
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
if(.Platform$OS.type == "windows") withAutoprint({
memory.size()
memory.size(TRUE)
memory.limit()
})
memory.limit(size=56000)
path<-dirname(rstudioapi::getSourceEditorContext()$path)
options(knitr.kable.NA = '')
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#to format rows in bold
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
# one * for italics, two ** for bold
map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
# Make sure values are not factors
df[[c]] <- as.character( df[[c]])
# Update formatting
df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
}
}
return(df)
}
#To produce line breaks in messages and warnings
knitr::knit_hooks$set(
error = function(x, options) {
paste('\n\n<div class="alert alert-danger">',
gsub('##', '\n', gsub('^##\ Error', '**Error**', x)),
'</div>', sep = '\n')
},
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
},
message = function(x, options) {
paste('<div class="message">',
gsub('##', '\n', x),
'</div>', sep = '\n')
}
)
irrs<-function(x, y="event", z="person_days",db){
#x= variable que agrupa
#y= evento explicado
#z= person days
#db= base de datos
fmla <- as.formula(paste0(y,"~",x))
fmla2 <- as.formula(paste0(z,"~",x))
assign(paste0("irr_",y,"_por_",x),
rateratio.test::rateratio.test(
x=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)],
n=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)]
)
)
return(
rateratio.test::rateratio.test(
x=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)],
n=as.numeric(xtabs(fmla2, data=get(db)))[c(2,1)]
)
)
}
knitr::include_graphics("transmat_ser23_2.svg")
renv::snapshot()
rm(list=ls());gc()
#If you render multiple documents from the same script or R session, you should detach("Statamarkdown") in between documents.
try(detach("Statamarkdown"))
no_mostrar=1
load("Trabajo 1.RData")
#Libraries used in the routine. Dont change the order
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
copiar_nombres <- function(x,row.names=FALSE,col.names=TRUE,dec=",",...) {
if(class(try(dplyr::ungroup(x)))[1]=="tbl_df"){
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
} else {
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
}
}
pacman::p_unlock(lib.loc = .libPaths()) #para no tener problemas reinstalando paquetes
if(!require(pacman)){install.packages("pacman")}
if(!require(devtools)){install.packages("devtools", type = "win.binary", dependencies=T)}
pacman::p_load(ggpattern, rio, tidyverse, tidylog, tableone, compareGroups, Hmisc, kableExtra, DT, polycor, corrplot, jtools,  missRanger, missForest, knitr, kableExtra, plotly, janitor, survey, lubridate, Epi, mstate, survdim, devtools, MatchIt, cobalt, eha, DiagrammeR, DiagrammeRsvg, rsvg, htmltools, webshot, flexsurv, muhaz, Metrics, sjPlot, job, showtext, magick, dlookr, easystats, ggpmisc, rms, rateratio.test, XML, RCurl, rlist, install=T)
if(!require(RMSTSens)){remotes::install_github("seungjae2525/RMSTSens")}
if(!require(survcomp)){try(devtools::install_github("bhklab/survcomp",upgrade ="never"))}
try(webshot::install_phantomjs())
if(!require(bpmn)){try(devtools::install_github("bergant/bpmn",upgrade ="never"))}
#if(!require(Statamarkdown)){try(devtools::install_github("Hemken/Statamarkdown",upgrade ="never"))}
# #Error in if (options$noisey == TRUE) message(paste("\n", options$engine,  :
#   argumento tiene longitud cero
# Calls: <Anonymous> ... sew.list -> lapply -> FUN -> sew.character -> <Anonymous>
#easystats::install_suggested()
options(scipen=2) #display numbers rather scientific number
#remotes::install_github("chjackson/flexsurv-dev", upgrade = "never")
#devtools::install_github("hputter/mstate", upgrade = "never")
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
fitstats.flexsurvreg = function(x){
ll = x$loglik
aic = x$AIC
k = length(x$coefficients)
n = sum(x$data$m["(weights)"])
aicc = aic + ((2 * k) * (k + 1) / (n - k - 1))
bic = - 2 * ll + (k * log(n))
data.frame(
Df = k,
"n2ll" = -2 * ll,
AIC = aic,
AICc = aicc,
BIC = bic
)
}
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
if(.Platform$OS.type == "windows") withAutoprint({
memory.size()
memory.size(TRUE)
memory.limit()
})
memory.limit(size=56000)
path<-dirname(rstudioapi::getSourceEditorContext()$path)
options(knitr.kable.NA = '')
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#to format rows in bold
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
# one * for italics, two ** for bold
map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
# Make sure values are not factors
df[[c]] <- as.character( df[[c]])
# Update formatting
df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
}
}
return(df)
}
#To produce line breaks in messages and warnings
knitr::knit_hooks$set(
error = function(x, options) {
paste('\n\n<div class="alert alert-danger">',
gsub('##', '\n', gsub('^##\ Error', '**Error**', x)),
'</div>', sep = '\n')
},
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
},
message = function(x, options) {
paste('<div class="message">',
gsub('##', '\n', x),
'</div>', sep = '\n')
}
)
irrs<-function(x, y="event", z="person_days",db){
#x= variable que agrupa
#y= evento explicado
#z= person days
#db= base de datos
fmla <- as.formula(paste0(y,"~",x))
fmla2 <- as.formula(paste0(z,"~",x))
assign(paste0("irr_",y,"_por_",x),
rateratio.test::rateratio.test(
x=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)],
n=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)]
)
)
return(
rateratio.test::rateratio.test(
x=as.numeric(xtabs(fmla, data=get(db)))[c(2,1)],
n=as.numeric(xtabs(fmla2, data=get(db)))[c(2,1)]
)
)
}
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
tidy = FALSE,
message = FALSE,
fig.align = 'center',
out.width = "100%")
options(knitr.table.format = "html")
library(RefManageR)
BibOptions(check.entries = FALSE,
bib.style = "numeric",
cite.style = "numeric",
style = "text",
super = TRUE,
hyperlink = FALSE,
first.inits = TRUE,
max.names = TRUE,
dashed = TRUE)
myBib <- ReadBib("libreria_poly.txt", check = F,  .Encoding="latin1")
knitr::include_graphics("descarga.png")
knitr::include_graphics("transmat_ser23_2.svg")
install.packages("qrcode")
unlink("index_cache", recursive = TRUE)
unlink("*_cache")
unlink("*_cache")
unlink("*_cache", recursive=T)
unlink("*_cache", recursive=T)
devtools::install_github("Hemken/Statamarkdown")
if(!require(Statamarkdown)){devtools::install_github("Hemken/Statamarkdown")}
dplyr::bind_rows(cbind.data.frame(from=1, psu="no_psu",res_b_db),
cbind.data.frame(from=1, psu="psu",res2_b_db),
cbind.data.frame(from=2, psu="no_psu",s2_res_b_db),
cbind.data.frame(from=2, psu="psu",s2_res2_b_db)) %>%
dplyr::filter(time %in% c(1,3)) %>%
dplyr::mutate_at(c("mean","LCI","UCI"),~sprintf("%2.1f",.*100)) %>%
tidyr::pivot_wider(id_cols=c("from","state_prob","time"),names_from="psu", values_from=c("mean","LCI","UCI")) %>%
dplyr::select(from,state_prob,time, mean_no_psu, LCI_no_psu, UCI_no_psu, mean_psu, LCI_psu, UCI_psu)%>%
dplyr::mutate(nopsu= paste0(mean_no_psu," (",LCI_no_psu,", ",UCI_no_psu,")"), psu= paste0(mean_psu, " (",LCI_psu,", ",UCI_psu,")")) %>%
dplyr::select(from,state_prob,time, nopsu, psu) %>%
dplyr::filter(dplyr::case_when(from==1 & state_prob==1~ F, from==2 & state_prob==2~ F, from==3 & state_prob==3~ F, from==2 & state_prob==1~ F, T~T)) %>%
dplyr::arrange(time, from, state_prob)
rm(list=ls());gc()
unlink("*_cache", recursive=T)
#If you render multiple documents from the same script or R session, you should detach("Statamarkdown") in between documents.
try(detach("Statamarkdown"))
no_mostrar=1
load("Trabajo 1.RData")
#Libraries used in the routine. Dont change the order
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
copiar_nombres <- function(x,row.names=FALSE,col.names=TRUE,dec=",",...) {
if(class(try(dplyr::ungroup(x)))[1]=="tbl_df"){
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(data.frame(x)),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
} else {
if(options()$OutDec=="."){
options(OutDec = dec)
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ".")
return(x)
} else {
options(OutDec = ",")
write.table(format(x),"clipboard",sep="\t",row.names=FALSE,col.names=col.names,...)
options(OutDec = ",")
return(x)
}
}
}
pacman::p_unlock(lib.loc = .libPaths()) #para no tener problemas reinstalando paquetes
if(!require(pacman)){install.packages("pacman")}
if(!require(devtools)){install.packages("devtools", type = "win.binary", dependencies=T)}
# Statamarkdown: https://github.com/hemken/Statamarkdown
if(!require(Statamarkdown)){devtools::install_github("Hemken/Statamarkdown")}
pacman::p_load(rio, tidyverse, tidylog, RefManageR, compareGroups, knitr,
survival, mstate, MatchIt, rms, jtools, kableExtra, plotly, janitor, Epi, sjPlot, job, install=T)
options(scipen=2) #display numbers rather scientific number
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
if(.Platform$OS.type == "windows") withAutoprint({
memory.size()
memory.size(TRUE)
memory.limit()
})
memory.limit(size=56000)
path<-dirname(rstudioapi::getSourceEditorContext()$path)
options(knitr.kable.NA = '')
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:
#to format rows in bold
format_cells <- function(df, rows ,cols, value = c("italics", "bold", "strikethrough")){
# select the correct markup
# one * for italics, two ** for bold
map <- setNames(c("*", "**", "~~"), c("italics", "bold", "strikethrough"))
markup <- map[value]
for (r in rows){
for(c in cols){
# Make sure values are not factors
df[[c]] <- as.character( df[[c]])
# Update formatting
df[r, c] <- ifelse(nchar(df[r, c])==0,"",paste0(markup, gsub(" ", "", df[r, c]), markup))
}
}
return(df)
}
#To produce line breaks in messages and warnings
knitr::knit_hooks$set(
error = function(x, options) {
paste('\n\n<div class="alert alert-danger">',
gsub('##', '\n', gsub('^##\ Error', '**Error**', x)),
'</div>', sep = '\n')
},
warning = function(x, options) {
paste('\n\n<div class="alert alert-warning">',
gsub('##', '\n', gsub('^##\ Warning:', '**Warning**', x)),
'</div>', sep = '\n')
},
message = function(x, options) {
paste('<div class="message">',
gsub('##', '\n', x),
'</div>', sep = '\n')
}
)
`%>%`<-magrittr::`%>%`
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
tidy = FALSE,
message = FALSE,
fig.align = 'center',
out.width = "100%")
options(knitr.table.format = "html")
library(RefManageR)
BibOptions(check.entries = FALSE,
bib.style = "numeric",
cite.style = "numeric",
style = "text",
super = TRUE,
hyperlink = FALSE,
first.inits = TRUE,
max.names = TRUE,
dashed = TRUE)
myBib <- ReadBib("libreria_poly.txt", check = F,  .Encoding="latin1")
knitr::include_graphics("descarga.png")
#knitr::include_graphics("transmat_ser23_2.svg")
require(Epi)
#For censored state transitions it can be awkward having to replicate the censoring time for each non-visited state
#https://github.com/stulacy/multistateutils
states_trans<-c("Admisión",	"Completar\nTratamiento",	"Contacto\nSistema justicia criminal")
trans_matrix <- matrix(c(
NA,1,2,
NA,NA,3,
NA,NA,NA
), nrow=3, ncol=3,byrow=TRUE,dimnames=list(from=states_trans,to=states_trans))
ratio=1.2
#All possible paths through the multi-state model can be found here:
Epi::boxes.Lexis(trans_matrix, wmult=1*ratio, hmult=1*ratio, cex=.9*ratio,
boxpos = list(y = c(30, 70, 30),
x = (1:3)*(25)+5),
txt.arr=c(expression("1) " *lambda['12']),
expression("2) " *lambda['23']),
expression("3) " *lambda['34'])
))
title(sub = paste0("No hay estados recurrentes;\nEstado absorbente: Contacto con Sistema de justicia criminal")) ## internal titles
dplyr::bind_rows(cbind.data.frame(from=1, psu="no_psu",res_b_db),
cbind.data.frame(from=1, psu="psu",res2_b_db),
cbind.data.frame(from=2, psu="no_psu",s2_res_b_db),
cbind.data.frame(from=2, psu="psu",s2_res2_b_db)) %>%
dplyr::filter(time %in% c(1,3)) %>%
dplyr::mutate_at(c("mean","LCI","UCI"),~sprintf("%2.1f",.*100)) %>%
tidyr::pivot_wider(id_cols=c("from","state_prob","time"),names_from="psu", values_from=c("mean","LCI","UCI")) %>%
dplyr::select(from,state_prob,time, mean_no_psu, LCI_no_psu, UCI_no_psu, mean_psu, LCI_psu, UCI_psu)%>%
dplyr::mutate(nopsu= paste0(mean_no_psu," (",LCI_no_psu,", ",UCI_no_psu,")"), psu= paste0(mean_psu, " (",LCI_psu,", ",UCI_psu,")")) %>%
dplyr::select(from,state_prob,time, nopsu, psu) %>%
dplyr::filter(dplyr::case_when(from==1 & state_prob==1~ F, from==2 & state_prob==2~ F, from==3 & state_prob==3~ F, from==2 & state_prob==1~ F, T~T)) %>%
dplyr::arrange(time, from, state_prob) %>%
knitr::kable("html", caption="Probabilidades (en porcentajes) de transición a Completar tto.(2) o Contactar el sistema de justicia(3) con 95% de confianza", col.names=c("Desde (Estado)", "Hacia (Estado)", "Tiempo (en años)", "Sin policonsumo (95%IC)", "Con policonsumo (95%IC)"))%>%
kable_styling(font_size = 25) %>%
gsub("font-size: initial !important;",
"font-size: 27pt !important;",
.)
dplyr::bind_rows(cbind.data.frame(from=1, psu="no_psu",res_b_db),
cbind.data.frame(from=1, psu="psu",res2_b_db),
cbind.data.frame(from=2, psu="no_psu",s2_res_b_db),
cbind.data.frame(from=2, psu="psu",s2_res2_b_db)) %>%
dplyr::filter(time %in% c(1,3)) %>%  rio::export("probs_aj_multistate.dta")
plot(qrcode::qr_code('https://agscl.github.io/dsp_comp_est/pres_mar_23_poly_final.html'))
unlink("*_cache")
